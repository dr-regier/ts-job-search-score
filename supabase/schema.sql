-- AI Job Application Agent - Supabase Database Schema
-- This schema supports multi-user job search with authentication

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- PROFILES TABLE
-- Stores user professional information and preferences
-- =====================================================
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  professional_background TEXT NOT NULL,
  skills TEXT[] NOT NULL DEFAULT '{}',
  salary_min INTEGER NOT NULL DEFAULT 0,
  salary_max INTEGER NOT NULL DEFAULT 0,
  preferred_locations TEXT[] NOT NULL DEFAULT '{}',
  job_preferences TEXT[] NOT NULL DEFAULT '{}',
  deal_breakers TEXT,
  scoring_weights JSONB NOT NULL DEFAULT '{
    "salaryMatch": 30,
    "locationFit": 20,
    "companyAppeal": 25,
    "roleMatch": 15,
    "requirementsFit": 10
  }'::jsonb,
  created_via TEXT CHECK (created_via IN ('chat', 'form')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- JOBS TABLE
-- Stores discovered jobs with scoring and application tracking
-- =====================================================
CREATE TABLE IF NOT EXISTS jobs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,

  -- Job information
  title TEXT NOT NULL,
  company TEXT NOT NULL,
  location TEXT NOT NULL,
  salary TEXT,
  description TEXT NOT NULL,
  requirements TEXT[] NOT NULL DEFAULT '{}',
  url TEXT NOT NULL,
  source TEXT NOT NULL CHECK (source IN ('firecrawl', 'adzuna', 'manual')),
  discovered_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- Scoring data (added by Job Matching Agent)
  score INTEGER,
  score_breakdown JSONB,
  reasoning TEXT,
  gaps TEXT[] DEFAULT '{}',
  priority TEXT CHECK (priority IN ('high', 'medium', 'low')),

  -- Application tracking
  application_status TEXT CHECK (application_status IN ('saved', 'applied', 'interviewing', 'offer', 'rejected')),
  status_updated_at TIMESTAMPTZ,
  notes TEXT,

  -- Tailored resume (generated by Resume Generator Agent)
  tailored_resume JSONB,

  -- Timestamps
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- RESUMES TABLE
-- Stores resume metadata with files in Supabase Storage
-- =====================================================
CREATE TABLE IF NOT EXISTS resumes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,

  -- Resume metadata
  name TEXT NOT NULL,
  file_path TEXT NOT NULL, -- Path in Supabase Storage: user_id/resume_id.{ext}
  file_size INTEGER NOT NULL, -- Size in bytes
  format TEXT NOT NULL CHECK (format IN ('markdown', 'text')),
  is_master BOOLEAN NOT NULL DEFAULT true,

  -- Parsed sections (optional, for quick access)
  sections JSONB,

  -- Timestamps
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================
CREATE INDEX IF NOT EXISTS idx_jobs_user_id ON jobs(user_id);
CREATE INDEX IF NOT EXISTS idx_jobs_application_status ON jobs(user_id, application_status);
CREATE INDEX IF NOT EXISTS idx_jobs_priority ON jobs(user_id, priority);
CREATE INDEX IF NOT EXISTS idx_jobs_score ON jobs(user_id, score DESC);
CREATE INDEX IF NOT EXISTS idx_resumes_user_id ON resumes(user_id);

-- =====================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- Users can only access their own data
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE resumes ENABLE ROW LEVEL SECURITY;

-- PROFILES POLICIES
CREATE POLICY "Users can view their own profile"
  ON profiles FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can insert their own profile"
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

CREATE POLICY "Users can delete their own profile"
  ON profiles FOR DELETE
  USING (auth.uid() = id);

-- JOBS POLICIES
CREATE POLICY "Users can view their own jobs"
  ON jobs FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own jobs"
  ON jobs FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own jobs"
  ON jobs FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own jobs"
  ON jobs FOR DELETE
  USING (auth.uid() = user_id);

-- RESUMES POLICIES
CREATE POLICY "Users can view their own resumes"
  ON resumes FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own resumes"
  ON resumes FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own resumes"
  ON resumes FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own resumes"
  ON resumes FOR DELETE
  USING (auth.uid() = user_id);

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_jobs_updated_at
  BEFORE UPDATE ON jobs
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_resumes_updated_at
  BEFORE UPDATE ON resumes
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- AUTO-CREATE PROFILE ON USER SIGNUP
-- =====================================================
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, name, professional_background, skills)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'name', NEW.email),
    'New user - please update your profile',
    '{}'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create profile on signup
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user();

-- =====================================================
-- STORAGE BUCKETS (Run these separately in Supabase Storage UI)
-- =====================================================
-- 1. Create bucket named 'resumes'
-- 2. Set bucket to private (authenticated users only)
-- 3. Add RLS policies in Storage:
--
-- Policy: "Users can upload their own resumes"
-- ON STORAGE OBJECT INSERT
-- WITH CHECK (auth.uid()::text = (storage.foldername(name))[1])
--
-- Policy: "Users can view their own resumes"
-- ON STORAGE OBJECT SELECT
-- USING (auth.uid()::text = (storage.foldername(name))[1])
--
-- Policy: "Users can delete their own resumes"
-- ON STORAGE OBJECT DELETE
-- USING (auth.uid()::text = (storage.foldername(name))[1])
--
-- File path structure: {user_id}/{resume_id}.{ext}
